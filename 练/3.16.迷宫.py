# -*- coding:utf-8 -*-
"""
@author:李丹
@file:3.16.迷宫.py
@time:2023/3/16 18:51
"""
'''
下图给出了一个迷宫的平面图，其中标记为 
1 的为障碍，标记为 
0 的为可以通行的地方。
010000
000100
001001
110000
迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这 个它的上、下、左、右四个方向之一。
对于上面的迷宫，从入口开始，可以按 DRRURRDDDR 的顺序通过迷宫， 一共 
10 步。其中 
D、U、L、R 分别表示向下、向上、向左、向右走。 对于下面这个更复杂的迷宫（
30 行 50 列），请找出一种通过迷宫的方式，其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。
请注意在字典序中
D<L<R<U。
'''
import sys

sys.setrecursionlimit(1 << 31 - 1)

matrix = '''
01010101001011001001010110010110100100001000101010
00001000100000101010010000100000001001100110100101
01111011010010001000001101001011100011000000010000
01000000001010100011010000101000001010101011001011
00011111000000101000010010100010100000101100000000
11001000110101000010101100011010011010101011110111
00011011010101001001001010000001000101001110000000
10100000101000100110101010111110011000010000111010
00111000001010100001100010000001000101001100001001
11000110100001110010001001010101010101010001101000
00010000100100000101001010101110100010101010000101
11100100101001001000010000010101010100100100010100
00000010000000101011001111010001100000101010100011
10101010011100001000011000010110011110110100001000
10101010100001101010100101000010100000111011101001
10000000101100010000101100101101001011100000000100
10101001000000010100100001000100000100011110101001
00101001010101101001010100011010101101110000110101
11001010000100001100000010100101000001000111000010
00001000110000110101101000000100101001001000011101
10100101000101000000001110110010110101101010100001
00101000010000110101010000100010001001000100010101
10100001000110010001000010101001010101011111010010
00000100101000000110010100101001000001000000000010
11010000001001110111001001000011101001011011101000
00000110100010001000100000001000011101000000110011
10101000101000100010001111100010101001010000001000
10000010100101001010110000000100101010001011101000
00111100001000010000000110111000000001000000001011
10000001100111010111010001000110111010101101111000'''
# see = set()          #用来记录走过的点
# def arr(x, y):        #用来判断x,y有没有超出界限的函数
#     if x < 0 or y < 0 or x >= 30 or y >= 50 or nums[x][y] == 1 or ((x,y) in see):
#         return False
#     return True
# def bfs(x, y):
#     que = [(x, y, "")]         #在初始队列中添加x,y,和空字符串
#     while que:
#         x, y, z = que.pop(0) #取出队首元素
#         if arr(x, y):                #如果x,y没有超出界限
#             see.add((x, y))      #标记走过
#             que.append((x + 1, y, z + "D"))  #按照字母表顺序走，然后把x,y,和对应向上的D添加到队尾
#             que.append((x, y - 1, z + "L"))
#             que.append((x, y + 1, z + "R"))
#             que.append((x - 1, y, z + "U"))
#         if x ==29 and y==49:       #当达到目标位置，返回最后的z
#             return z
# print(bfs(0, 0))
import os
import sys

# 请在此输入您的代码
n, m = 30, 50
see = set()  # 记录走过的点
nums = [[int(x) for x in input()] for _ in range(n)]
def stop(x,y):
  if x < 0 or y < 0 or x >= 30 or y >= 50 or nums[x][y] == 1 or ((x,y) in see):
    return False
  return True
def bfs(x,y):
  que = [(x, y, '')]
  while que:
    x, y, z = que.pop(0)
    if stop(x, y):  # x,y没有超界
      see.add((x, y))
      que.append((x+1, y, z + 'D'))  # 按字母顺序，这样最后的出来的是顺序小的
      que.append((x, y-1, z + 'L'))
      que.append((x, y+1, z + 'R'))
      que.append((x-1, y, z + 'U'))
    if x == 29 and y == 49:
      return z
print(bfs(0,0))
